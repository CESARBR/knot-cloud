version: '3.7'

services:
  # Mainflux services
  users:
    image: mainflux/users:0.10.0
    env_file: '../env.d/mainflux-users.env'
    depends_on:
      - users-db
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == worker]
      labels:
        - traefik.enable=true
        - traefik.http.services.users.loadbalancer.server.port=8180
        - traefik.http.routers.users.rule=HostRegexp(`{subdomain:users}.{domain:[a-zA-Z0-9.]+}`)
        - traefik.http.routers.users.entrypoints=http

  things:
    image: mainflux/things:0.10.0
    env_file: '../env.d/mainflux-things.env'
    depends_on:
      - things-db
      - users
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == worker]
      labels:
        - traefik.enable=true
        - traefik.http.services.things.loadbalancer.server.port=8182
        - traefik.http.routers.things.rule=HostRegexp(`{subdomain:things}.{domain:[a-zA-Z0-9.]+}`)
        - traefik.http.routers.things.entrypoints=http

  authn:
    image: mainflux/authn:0.10.0
    env_file: '../env.d/mainflux-authn.env'
    depends_on:
      - authn-db
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == worker]
      labels:
        - traefik.enable=true
        - traefik.http.services.authn.loadbalancer.server.port=8183
        - traefik.http.routers.authn.rule=HostRegexp(`{subdomain:authn}.{domain:[a-zA-Z0-9.]+}`)
        - traefik.http.routers.authn.entrypoints=http

  # KNoT Fog Core
  # Use the Go version of cesarbr/knot-cloud-storage
  storage:
    image: cesarbr/knot-cloud-storage:dev-go
    env_file: '../env.d/knot-cloud-storage.env'
    depends_on:
      - mongo
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == worker]
      labels:
        - traefik.enable=true
        - traefik.http.services.storage.loadbalancer.server.port=8181
        - traefik.http.routers.storage.rule=HostRegexp(`{subdomain:storage}.{domain:[a-zA-Z0-9.]+}`)
        - traefik.http.routers.storage.entrypoints=http

  babeltower:
    image: cesarbr/knot-babeltower
    env_file: '../env.d/knot-babeltower.env'
    depends_on:
      - rabbitmq
      - users
      - things
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == worker]
      labels:
        - traefik.enable=true
        - traefik.http.services.babeltower.loadbalancer.server.port=8080
        - traefik.http.routers.babeltower.rule=HostRegexp(`{subdomain:api}.{domain:[a-zA-Z0-9.]+}`)
        - traefik.http.routers.babeltower.entrypoints=http

  # External dependencies: database, tracing, message broker, load balancer.
  things-redis:
    image: redis:5.0-alpine
    deploy:
      resources:
        limits:
          memory: 300M

  es-redis:
    image: redis:5.0-alpine
    deploy:
      resources:
        limits:
          memory: 300M

  things-db:
    image: postgres:9.6.17-alpine
    env_file: '../env.d/mainflux-things.env'
    volumes:
      - mainflux-things-db-volume:/var/lib/postgresql/data

  users-db:
    image: postgres:9.6.17-alpine
    env_file: '../env.d/mainflux-users.env'
    volumes:
      - mainflux-users-db-volume:/var/lib/postgresql/data

  authn-db:
    image: postgres:9.6.17-alpine
    env_file: '../env.d/mainflux-authn.env'
    volumes:
      - mainflux-authn-db-volume:/var/lib/postgresql/data

  mongo:
    image: mongo
    volumes:
      - knot-cloud-db-volume:/var/lib/mongo/data
    deploy:
      resources:
        limits:
          memory: 300M

  rabbitmq:
    image: rabbitmq:management
    env_file: '../env.d/rabbitmq.env'
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == worker]
      labels:
        - traefik.enable=true
        # Management dashboard configuration
        - traefik.http.services.rabbitmq-admin.loadbalancer.server.port=15672
        - traefik.http.routers.rabbitmq-admin.rule=HostRegexp(`{subdomain:admin}.{domain:[a-zA-Z0-9.]+}`)
        - traefik.http.routers.rabbitmq-admin.entrypoints=management
        # AMQP configuration
        - traefik.tcp.services.rabbitmq.loadbalancer.server.port=5672
        - traefik.tcp.routers.rabbitmq.rule=HostSNI(`*`)
        - traefik.tcp.routers.rabbitmq.entrypoints=broker

  jaeger:
    image: jaegertracing/all-in-one:1.13
    env_file: '../env.d/mainflux-jaeger.env'
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == worker]

  traefik:
    image: traefik:v2.2
    command: >
      traefik
        --providers.docker
        --providers.docker.watch
        --providers.docker.swarmMode
        --providers.docker.exposedByDefault=false
        --entrypoints.http.address=:80
        --entrypoints.management.address=:15672
        --entrypoints.broker.address=:5672
    ports:
      - '80:80'
      - '5672:5672'
      - '15672:15672'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      mode: global

volumes:
  mainflux-things-db-volume:
  mainflux-users-db-volume:
  mainflux-authn-db-volume:
  knot-cloud-db-volume:
